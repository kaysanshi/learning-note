ssm:
ssm框架的整合:
					springmvc+spring+mybatis
					导包：spring基础包+mybatis基础包+mybatis-spring.jar;
				web.xml配置：spring上下文读取配置；spring监听器配置；springmvc中的前端控制器配置及映射：乱码解决：
								<!-- spring上下文的位置 -->
									<context-param>
										<param-name>contextConfigLocation</param-name>
										<param-value>classpath*:config/applicationContext-*.xml</param-value>
									</context-param>
									<!-- Spring的监听器 -->
									<listener>
										<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
									</listener>
									<!-- POST提交过滤器 UTF-8 -->
									<filter>
										<filter-name>encoding</filter-name>
										<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
										<init-param>
											<param-name>encoding</param-name>
											<param-value>UTF-8</param-value>
										</init-param>
									</filter>

									<filter-mapping>
										<filter-name>encoding</filter-name>
										<url-pattern>*.action</url-pattern>
									</filter-mapping>
									<!-- 前端控制器 -->
									<servlet>
										<servlet-name>ssm</servlet-name>
										<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
										<init-param>
											<param-name>contextConfigLocation</param-name>
											<!-- 此处不配置 默认找 /WEB-INF/[servlet-name]-servlet.xml -->
											<param-value>classpath*:config/springmvc.xml</param-value>
										</init-param>
										<!-- 启动的时候就实例化。如果不加的时候是只有访问的时候把他给实例化 -->
										<load-on-startup>1</load-on-startup>
									</servlet>
									<servlet-mapping>
										<servlet-name>ssm</servlet-name>
										<!-- 1:*.do *.action 拦截以.do结尾的请求 (不拦截 jsp png jpg .js .css) 2:/ 拦截所有请求 
											（不拦截.jsp) 建议使用此种 方式 （拦截 .js.css .png) (放行静态资源） 3:/* 拦截所有请求（包括.jsp) 此种方式 不建议使用 -->
										<url-pattern>/</url-pattern>
									</servlet-mapping>
							
				springmvc配置：
								加载属性文件,配置扫描器，解析器，对静态资源的放行，配置视图解析器：
								<!-- 加载属性文件 -->
										<context:property-placeholder location="classpath:resource.properties"/>
										<!-- 配置扫描 器 -->
										<context:component-scan base-package="cn.itcast.core.web.controller"/>
										<!-- 配置处理器映射器  适配器 自动解析-->
										<mvc:annotation-driven/>
										<!-- 对静态资源放行 -->
										<mvc:resources location="/css/" mapping="/css/**"/>
										<mvc:resources location="/js/" mapping="/js/**"/>		
										<mvc:resources location="/fonts/" mapping="/fonts/**"/>				
										<!-- 配置视图解释器 jsp -->
										<bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
											<property name="prefix" value="/WEB-INF/jsp/"/>
											<property name="suffix" value=".jsp"/>
										</bean>
				spring配置：
							配置读取数据库连接池，配置数据源，配置mybatis工厂，配置扫描mapper动态代理，
								<!-- 配置 读取properties文件 jdbc.properties -->
									<context:property-placeholder location="classpath:config/jdbc.properties" />

									<!-- 配置 数据源 -->
									<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
										<!-- 驱动 -->
										<property name="driverClassName" value="${jdbc.driver}" />
										<!-- url -->
										<property name="url" value="${jdbc.url}" />
										<!-- 用户名 -->
										<property name="username" value="${jdbc.username}" />
										<!-- 密码 -->
										<property name="password" value="${jdbc.password}" />
									</bean>

									<!-- 配置 Mybatis的工厂 -->
									<bean class="org.mybatis.spring.SqlSessionFactoryBean">
										<!-- 数据源 -->
										<property name="dataSource" ref="dataSource" />
										<!-- 配置Mybatis的核心 配置文件所在位置 -->
										<property name="configLocation" value="classpath:SqlMapConfig.xml" />
										<!-- 配置pojo别名 -->
										<property name="typeAliasesPackage" value="cn.itcast.core.bean"></property>
									</bean>

									<!-- 配置 1：原始Dao开发 接口实现类 Mapper.xml 三个 2：接口开发 接口 不写实现类 Mapper.xml 二个 （UserDao、ProductDao 
										、BrandDao。。。。。。。） 3：接口开发、并支持扫描 cn.itcast.core.dao(UserDao。。。。。） 写在此包下即可被扫描到 -->
									<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
										<property name="basePackage" value="cn.itcast.core.dao" />
									</bean>
				mybatis配置：
							基本的核心配置文件，以及对象映射的mapper文件
							基本配置文件不用写东西，只需声明一下就可以。mapper文件主要配置书写相应的sql语句
							<mapper namespace="cn.itcast.core.dao.BaseDictDao" >
							  <!-- 通过类型查询 -->
							  <select id="selectByTypecode" resultType="cn.itcast.core.bean.BaseDict" parameterType="String" >
							    select *
							      from base_dict
								 where dict_type_code = #{typecode}
							  </select>
							  <!-- 通过主键查询 -->
							  <select id="selectByPrimaryKey" resultType="cn.itcast.core.bean.BaseDict" parameterType="java.lang.String" >
							    select *
							      from base_dict
							     where dict_id = #{dictId}
							  </select>
							</mapper>
				数据库连接池配置：
							jdbc.driver=com.mysql.jdbc.Driver
							jdbc.url=jdbc:mysql://localhost:3306/ssm_crm?characterEncoding=utf-8
							jdbc.username=root
							jdbc.password=123
			这样在web层中就是controller层，需要配置 @Controller标签为了让springmvc的扫描器扫描到，在里面书写相应的方法就可以了
				@RequestMapping(value = "/customer")//用于配置访问的路径
				public String showCumtomer() {
					return "redirect:/customer/list.action";
				}
				其他@Service层是标注于他的实现类上就可以了。