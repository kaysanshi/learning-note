框架：是一种结构化得软件，他提供了自动化得实现，作为架构解决方案可以被在其上实现应用程序的继承。
	1.自动化了常见的任务，2.提供架构的解决方案。
struts2：
	Struts2 是目前较为普及和成熟的基于MVC设计模式的web应用程序框架，它不仅仅是Struts1 的升级版本，更是一个全新的Struts架构。
	最初，是以WebWork框架和Struts框架为基础，通过提供增强和改进的Struts框架，进而实现简化web技术人员开发工作的目标。
	不久之后，Webwork框架和Struts社区联合创造了现在流行的Struts2框架。
	是实现MVC设计模式的第二代web应用程序的框架，新的特性：拦截器，注解代替XML配置，支持对象导航语言OGNl
	可重用可变更的uI组件API,

	MVC模式：模型，视图，控制器，分别通过动作，结果，过虑分配器（FilterDispatcher）
		客户端请求――――――>filterDispatcher-->动作模型---->结果视图--->客户端浏览器

		控制器---filterDispatcher
			控制器检查每一个传入的请求，决定那个动作处理这个请求，可以通过XMl和注解来
			配置完成
		模型----动作
			动作组件：将业务逻辑调用封装到一个独立的单元，动作是一个数据传输场所，
		视图----结果
			将应用程序的状态装换为一种用户可以交互的可视化得表示。结果组件提供了整洁的封装，将处理的控制转交给客户
			写响应对象，
	新的特性：
		拦截器：提供一种在其中定义不同的工作流和切向任务的架构组件，每一个动作都有一组拦截器与之相互关联，
		可以发生在动作之前和动作之后。
		OGNL:是一种访问储存的中央储存库的数据工具，允许引用或操作ValueStack（储存区域“便签”）中的数据的表达式语言
		ActionContext包含所有数据构成了动作执行环境，会话，请求，映射，valueStack.作为ValueStack和ThreadLocal储存场所，
		
		调用动作-------拦截器(OGNL)----->动作-------->结果---------ActionContext(oGNL操作，（valueStack,请求，会话。。。）)----->结果
	struts2动作：为了满足对框架的职责任何类都可以成为动作，给定请求封装，从请求到视图框架自动数据传输作为数据的携带者，动作必须帮助
		  框架决定那个结果应该呈现请求响应返回的视图。1.动作封装工作单元，2，动作为数据提供场所。须把每一个数据实现为javabean属性
		3.动作为结果路由选择返回控制字符串返回到A视图中
	Action是用来完成动作需要继承ActionSupport来和实现模型驱动就是action在将数据从请求传递到视图（无论是JSP还是其他类型的结果）方面起着重要作用。
	第二，action必须协助框架确定哪个结果应该呈现在响应请求的视图中。
	配置文件：
		web.xml配置文件是一种J2EE配置文件，决定servlet容器的HTTP元素需求如何进行处理。
		它严格来说不是一个Struts2 配置文件，但它是Struts2 运作所需要进行配置的文件。
		正如前面所讨论的，这个文件为每个web应用程序提供接入点。在部署描述符（web.xml）中，
		Struts2 应用程序的接入点将会定义为一个过滤器。因此我们将在web.xml里定义一个FilterDispatcher类的接入点，
		而这个web.xml文件需要在WebContent/WEB-INF文件夹下创建。
			web.xml主要为了配置：
				   <filter>
				      <filter-name>struts2</filter-name>
				      <filter-class>
					 org.apache.struts2.dispatcher.FilterDispatcher
				      </filter-class>
				   </filter>

				   <filter-mapping>
				      <filter-name>struts2</filter-name>
				      <url-pattern>/*</url-pattern>
				   </filter-mapping>
		struts.xml文件包含有随着Actions的开发你将要修改的配置信息。它可用于覆盖应用程序的默认设置，
		例如：struts.devMode=false 以及其他定义为属性文件的设置。这个文件可在WEB-INF/classes文件夹下创建。
		让我们来看一下在前一章节中阐述的Hello World示例里创建的struts.xml文件。
	・		struts.xml配置如下：
				<?xml version="1.0" encoding="UTF-8"?>
				<!DOCTYPE struts PUBLIC
				   "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
				   "http://struts.apache.org/dtds/struts-2.0.dtd">
				<struts>
				   <constant name="struts.devMode" value="true" />
				   <package name="helloworld" extends="struts-default">
				     
				      <action name="hello" 
					    class="cn.w3cschool.struts2.HelloWorldAction" 
					    method="execute">
					    <result name="success">/HelloWorld.jsp</result>
				      </action>
				      <-- more actions can be listed here -->

				   </package>
				   <-- more packages can be listed here -->

				</struts>
		其中有<package>标签为了声明不同的包有下面属性：
			name：（必需）	为package的唯一标识，
			extends：指定package继承另一package的所有配置。通常情况下，我们使用struts-default作为package的基础。
			abstract：定义package为抽象的。如果标记为true，则package不能被最终用户使用。
			namespace：Actions的唯一命名空间
			<constant>标签以及name和value属性将用于覆盖default.properties中定义的任一属性，就像我们设置的struts.devMode属性一样。
			设置struts.devMode属性允许我们在日志文件中查看更多的调试消息。

			我们定义<action>标签对应于我们想要访问的每个URL，并且使用execute()方法定义一个访问相应的URL时将要访问的类。

			Results（结果）确定在执行操作后返回到浏览器的内容，而从操作返回的字符串应该是结果的名称。 
			Results按上述方式配置，或作为“全局”结果配置，可用于包中的每个操作。 Results有name和type属性可选，默认的name值是“success”。
		Struts.xml文件可以随着时间的推移而增长，因此通过包打破它是使它模块化的一种方式，
			但struts提供了另一种模块化struts.xml文件的方法，
			你可以将文件拆分为多个xml文件，并用以下方式导入它们。
				<struts>
				     <include file="my-struts1.xml"/>
				     <include file="my-struts2.xml"/>
				</struts>
		struts.properties文件
			这个配置文件提供了一种机制来改变框架的默认行为。struts.properties配置文件中包含的所有属性也可以在web.xml中配置使用init-param，
			以及在struts.xml配置文件中使用constant标签。 但如果你想保持事件独立以及保留更多struts细节，
			那么你可以在WEB-INF/classes文件夹下创建这个文件。struts.properties文件中配置的值将覆盖

		default.properties
		中配置的默认值，这些值包含在struts2-core-x.y.z.jar分布中
	Action动作：
	Struts2中actions的唯一要求是必须有一个无参数方法返回String或Result对象，并且必须是POJO。
	如果没有指定no-argument方法，则默认是使用execute()方法。
	动态获取方法：用驱动模型封装方法：
		public class UserActionModel extends ActionSupport implements ModelDriven<User>{}
		动态方法调用：
			struts>
				<!-- 配置动态方法是否开启的常量 默认为false的
				<constant name="struts.enable.DynamicMethodInvocation" value="true"></constant>-->
				<package name="dynamic" extends="struts-default" namespace="/dynamic">
					<action name="DemoAction*" class="com.leo.struts2.dynamic.DemoAction">
						<result name="success">/struts/index.jsp</result>
					</action>
					
				</package>
			</struts>		
		访问时用这个来访问哪一个方法：DemoAction!add;
		另一种配置方法是参数占位符来访问：
			Action配置：
			<struts>
				<!-- 配置动态方法是否开启的常量 默认为false的
				<constant name="struts.enable.DynamicMethodInvocation" value="false"></constant>-->
				<package name="dynamic" extends="struts-default" namespace="/dynamic">
				<!-- 动态方法调用 使用{1}取出方法通过*来匹配符好-->
					<action name="DemoAction_*" class="com.leo.struts2.dynamic.DemoAction"
							method="{1}">
						<!--  result是默认为success；type:dispatcher;转发
						class:默认为com.opensymphony.xwork2.ActionSupport;
						-->
						<result name="success">/struts/index.jsp</result>
					</action>
					
				</package>
			</struts>
		访问使用方式：
			

拦截器：
	可以动态的增强Action对象的功能拦截器作用于Action和result之间，
	在调用action之前提供预处理逻辑。

	在调用action后提供后处理逻辑。

	捕获异常，以便可以执行备用处理
	实际中action将通过拦截器使用invocation.invoke()调用执行，所以你可以根据你的需求做一些预处理和一些后处理。
	框架本身通过第一次调用ActionInvocation对象的invoke()来启动进程。每次调用invoke()时，
	ActionInvocation都会查询其状态，并执行下一个拦截器。当所有配置的拦截器都被调用时，invoke()将使得action本身被执行。
	/**
	 * 最常用的拦截器
	 * @author leoi555
	 *定制拦截器拦截的方法，
	 *定制哪些方法需要拦截
	 *哪些方法不需要拦截
	 */
	public class MyInterceptor2  extends MethodFilterInterceptor{
		
		@Override
		protected String doIntercept(ActionInvocation invocation) throws Exception {
			// TODO Auto-generated method stub
			//前处理
				System.out.println("前处理");
			//放行
				invocation.invoke();
			//后续
				System.out.println("后处理");
				return "success";
		}

	}
	现在我们需要注册新的拦截器，然后调用它，因为我们在前面的例子中调用的是默认拦截器。要注册一个新的拦截器
	把<interceptors> ... </ interceptors>标签直接放置在<package>标签下的struts.xml文件中即可。
	对于默认拦截器，你可以跳过此步骤，就像我们前面的示例中所做的那样。但现在让我们使用以下方法注册新的
		<struts>
		 <package name="inter" namespace="/dynamic" extends="struts-default" >
	      <interceptors>
			<!-- 注册拦截器 -->
			<interceptor name="myInter2" class="com.leo.struts2.interceptor.MyInterceptor2 " ></interceptor>
				<!-- 2注册拦截器栈 -->
				<interceptor-stack name="myStack">
					<!-- 自定义拦截器引入放到默认的之前 -->
					<interceptor-ref name="myInter2">
						<!-- 指定哪些方法不拦截
							 <param name="excludeMethods">add,delete</param> -->
							 <!-- 指定哪些方法需要拦截 -->
							 <param name="includeMethods">add,delete</param>
					</interceptor-ref>
					<!-- 引用默认的拦截器栈（20个） -->
				<interceptor-ref name="defaultStack"></interceptor-ref>
				</interceptor-stack>
	      </interceptors>
	      <!-- 3.指定指定的包 -->
	      <default-interceptor-ref name="myStack"></default-interceptor-ref>
	      <action name="DemoAction_*" class="com.leo.struts2.dynamic.DemoAction" method="{1}">
			<result name="result" type="dispatcher">/struts/index.jsp</result>
	      </action>
	      
	      </package>
	</struts>
结果类型：
	1.dispatcher结果类型是默认的类型，如果未指定其他结果类型，则使用此类型。
	它用于转发到服务器上的servlet，JSP，HTML等页面。它使用RequestDispatcher.forward()方法。
	2.redirect结果类型redirect结果类型调用标准的response.sendRedirect()方法，使得浏览器向给定的位置创建一个新请求。
	我们可以在<result...>元素的主体中或作为<param name="location">的元素中给定位置。redirect也支持parse参数，
	3.freeMaker不做说明
	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE struts PUBLIC
	   "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
	   "http://struts.apache.org/dtds/struts-2.0.dtd">
	<struts>
		<package name="result" extends="struts-default" namespace="dynamic"
			>
			<!-- 请求的其实是请求得action 的name属性 -->
			<action name="result" class="com.leo.struts2.ResultAction" method="execute">
				<!-- 成功后进行转发 -->
				<result name="success" type="dispatcher">/dynamic/index.jsp</result>
				<!-- 成功后进行重定向 -->
				<result name="logindirect" type="redirect">/dynamic/index.jsp</result>
				<!--转发到Action 中 需要配置Actionname参数和namespace参数的值 转发时带参数的使用-->
				<result name="success" type="chain">
					<param name="actionName">LoginAction</param>
					<param name="namespace">/</param>
				<!--ognl在配置文件的使用 添加的带参数的name struts中不是默认的就会作为一个参数来处理 -->
					<param name="name">${name}</param>
				</result>
				<!--重定向到action地址栏要发生改变-->
				<result name="success" type="redirectAction">
					<param name="actionName">LoginAction</param>
					<param name="namespace">/</param>
				</result>
			</action>
			
		</package>
		<package name="Api" extends="struts-default" 
			>
			<action name="GetApiAction" class="com.leo.struts2.GetApiAction" method="execute">
				<!-- 成功后进行转发 -->
				<result name="success" type="dispatcher">/struts/indexApi.jsp</result>
				
			</action>
			
		</package>
	</struts>
	结果类型有如下的这些类型：<request name="" type="">
		<result name="success" type="dispatcher">/struts/indexApi.jsp</result>
		type有以下类型：chain:处理Action链:
					<!--转发到Action 中 需要配置Actionname参数和namespace参数的值 转发时带参数的使用-->
					<result name="success" type="chain">
						<param name="actionName">LoginAction</param>
						<param name="namespace">/</param>
					<!--ognl在配置文件的使用 添加的带参数的name struts中不是默认的就会作为一个参数来处理 -->
						<param name="name">${name}</param>
					</result>
				dispatcher：转向：
					<result name="success" type="dispatcher">/struts/indexApi.jsp</result>
				redirect：重定向
					<result name="success" type="redirtect">/struts/indexApi.jsp</result>
				redirectAction:重定向到Action中：
					<!--重定向到action地址栏要发生改变-->
					<result name="success" type="redirectAction">
						<param name="actionName">LoginAction</param>
						<param name="namespace">/</param>
					</result>
			

值栈/OGNL:
	OGNL（Object-Graph Navigation Language，对象图导航语言）是一种强大的表达式语言，用于引用和操作值栈上的数据，还可用于数据传输和类型转换。
		OGNL非常类似于JSP表达式语言。OGNL基于上下文中存有根对象或默认对象的理念，使用标记符号（即#号）来引用默认或根对象的属性。
		如前面所述，OGNL是基于上下文的，而Struts构建了一个ActionContext映射以供OGNL使用。 ActionContext映射包含以下内容：
		应用程序 - 应用程序作用域变量
		会话 - 会话作用域变量
		根/值栈 - 所有的action变量都存储在这里
		请求 - 请求作用域变量
		参数 - 请求参数
		属性 - 存储在页面，请求，会话和应用程序作用域中的属性	
	例子：
	/**
		 * 访问值栈
		 */
		ValueStack stack=ActionContext.getContext().getValueStack();
		Map<String , Object> context=new HashMap<>();
		context.put("key1", new String("yuesnjnjkv"));
		context .put("key2", new String("122333"));
		//压栈
		stack.push(context);
		System.out.println(stack.size()+"大小");
		//获取Actioncontext来储存数据
		ActionContext.getContext().put("list", "12ioi");
		//前台获取数据：
		//${list};
		//<s:property value="list">
	/**
	 * 获得根属性值
	 * @throws OgnlException
	 */
	@Test
	public void test() throws OgnlException {
		User root=new User("tom",23);
		Map<String , Object> map=new HashMap<>();
		map.put("user1", new User("jack",12));
		map.put("user2", new User("we", 20));
		OgnlContext oContext=new OgnlContext();
		//将root作为root部分
		oContext.setRoot(root);
		oContext.setValues(map);
		//书写OGNL
		//Ognl.getValue("", oContext, oContext.getRoot());
		//取出User 中对象的属性
		String name=(String)Ognl.getValue("username",oContext,oContext.getRoot());
		System.out.println(name);
	
		
		
 	}
	/**
	 * 获取根对应得栈值
	 * @throws OgnlException
	 */
	@Test
	public void test1() throws OgnlException {
		User user=new User("tom",23);
		Map<String , Object> map=new HashMap<>();
		map.put("user1", new User("jack",12));
		map.put("user2", new User("we", 20));
		OgnlContext oContext=new OgnlContext();
		oContext.setRoot(user);
		oContext.setValues(map);
		//取出context属性就是把map对象添加到里面
		//获取context对象的属性值
		String name2=(String)Ognl.getValue("#user1.username",oContext,oContext.getRoot());
		System.out.println(name2);
		int name23=(int)Ognl.getValue("#user1.age",oContext,oContext.getRoot());
		System.out.println(name23);
	}
	
	/**
	 * =赋值
	 */
	@Test
	public void test2() throws OgnlException {
		User user=new User("tom",23);
		Map<String , Object> map=new HashMap<>();
		map.put("user1", new User("jack",12));
		map.put("user2", new User("we", 20));
		OgnlContext oContext=new OgnlContext();
		oContext.setRoot(user);
		oContext.setValues(map);
		//赋值然后在取值
		String name2=(String)Ognl.getValue("#user1.username='张三'",oContext,oContext.getRoot());
		System.out.println(name2);
		int name23=(int)Ognl.getValue("#user1.age=122",oContext,oContext.getRoot());
		System.out.println(name23);
	}
	/**
	 * 调用方法：通过方法设置属性
	 * 
	 * 
	 */
	@Test
	public void test3() throws OgnlException {
		User user=new User("tom",23);
		Map<String , Object> map=new HashMap<>();
		map.put("user1", new User("jack",12));
		map.put("user2", new User("we", 20));
		OgnlContext oContext=new OgnlContext();
		oContext.setRoot(user);
		oContext.setValues(map);
		String name=(String) Ognl.getValue("getUsername()", oContext,oContext.getRoot());
		System.out.println(name);
		String name1=(String )Ognl.getValue("setUsername('nic'),getUsername()",  oContext,oContext.getRoot());
		System.out.println(name1);
		//调用静态属性
		Double pi=(Double)Ognl.getValue("@@PI", oContext,oContext.getRoot());
		System.out.println(pi);
	}
	/**
	 * 取出list map集合
	 */
	@Test
	public void test4() throws Exception{
		//准备ONGLContext
			//准备Root
			User rootUser = new User("tom",18);
			//准备Context
		Map<String,User> context = new HashMap<String,User>();
		context.put("user1", new User("jack",18));
		context.put("user2", new User("rose",22));
		OgnlContext oc = new OgnlContext();
		oc.setRoot(rootUser);
		oc.setValues(context);
		//书写OGNL
		
		//创建list对象
		Integer size = (Integer) Ognl.getValue("{'tom','jerry','jack','rose'}.size()", oc, oc.getRoot());
		String name = (String) Ognl.getValue("{'tom','jerry','jack','rose'}[0]", oc, oc.getRoot());
		String name2 = (String) Ognl.getValue("{'tom','jerry','jack','rose'}.get(1)", oc, oc.getRoot());
	
		System.out.println(size);
		System.out.println(name);
		System.out.println(name2);
		//创建Map对象
		Integer size2 = (Integer) Ognl.getValue("#{'name':'tom','age':18}.size()", oc, oc.getRoot());
		String name3  = (String) Ognl.getValue("#{'name':'tom','age':18}['name']", oc, oc.getRoot());
		Integer age  = (Integer) Ognl.getValue("#{'name':'tom','age':18}.get('age')", oc, oc.getRoot());
		System.out.println(size2);
		System.out.println(name3);
		System.out.println(age);
	}	
获取原生API:
	这些方式只是实现ActionSupport类即可获取以下对象：
	方式一：通过ActionContext
	//actionContext推荐使用代替map
			ActionContext context=ActionContext.getContext();
			Map<String, Object> sessionScope=ActionContext.getContext().getSession();
			//不推荐使用request域包装 
			Map<String, Object> requestScope=(Map<String, Object>) context.get("request");
				
			Map<String , Object> responseScope=(Map<String, Object>) context.get("response");
			//用于获取页面域
			Map<String , Object> applicationScope=context.getApplication();
			//这个是
			Map<String, Object> servletContext=(Map<String, Object>) context.get("ServletContext");
			
			requestScope.put("name","123");
			applicationScope.put("name", "124");
			sessionScope.put("name", "1333");
		调用时直接用${requestScope.name};
	方式二：通过ServlertActionContext来获取ServlertAPI；
		
		HttpServletRequest request=ServletActionContext.getRequest();
		Map<String,String[]> map=request.getParameterMap();
		for(String key:map.keySet()){
			String[] value=map.get(key);
		}
		//向request域中添加值：
			request.setAttribute("name","value");
		//向session域存值：
			request.getSession().setAttribute("sessionname","value");
		//向Application域中存入：
			ServletActionContext.getServletContext().setAtrribute("attrname","attvalue");

	调用时用：
标签：
		<s:if test="%{false}">
		    <div>Will Not Be Executed</div>
		</s:if>
		<s:elseif test="%{true}">
		    <div>Will Be Executed</div>
		</s:elseif>
		<s:else>
		    <div>Will Not Be Executed</div>
		</s:else>
		//
		
	   <s:text name="Please fill in the form below:" />
	   <s:form action="hello" method="post" enctype="multipart/form-data">
	  <!-- 表单隐藏项 -->
	   <s:hidden name="secret" value="abracadabra"/>
	   <s:textfield key="email.from" name="from" />
	   <s:password key="email.password" name="password" />
	   <s:textfield key="email.to" name="to" />
	   <s:textfield key="email.subject" name="subject" />
	   <s:textarea key="email.body" name="email.body" />
	   <s:label for="attachment" value="Attachment"/>
	   <s:file name="attachment" accept="text/html,text/plain" />
	   <s:token />
	   <!-- 单选框 -->
	   <s:radio label="Gender" name="gender" list="{'male','female'}" />
	   <!-- 复选框 -->
	   <s:checkboxlist label="Hobbies" name="hobbies"
	   list="{'sports','tv','shopping'}" />
		<!-- 下拉框标签 -->
	    <s:select name="username" label="Username"
		 list="{'Mike','John','Smith'}" />

	      <s:select label="Company Office" name="mySelection"
		 value="%{'America'}"
		 list="%{#{'America':'America'}}">
	      <s:optgroup label="Asia" 
		 list="%{#{'India':'India','China':'China'}}" />
	      <s:optgroup label="Europe"
		 list="%{#{'UK':'UK','Sweden':'Sweden','Italy':'Italy'}}" />
	      </s:select>

	      <s:combobox label="My Sign" name="mySign"
		 list="#{'aries':'aries','capricorn':'capricorn'}"
		 headerKey="-1" 
		 headerValue="--- Please Select ---" emptyOption="true"
		 value="capricorn" />
	      <s:doubleselect label="Occupation" name="occupation"
		 list="{'Technical','Other'}" doubleName="occupations2"
		 doubleList="top == 'Technical' ? 
		 {'I.T', 'Hardware'} : {'Accounting', 'H.R'}" />
	       <!--Ajax标签 struts2-dojo-plugin-2.2.3.jar -->
			       <s:form>
		      <sx:autocompleter label="Favourite Colour"
			 list="{'red','green','blue'}" />
		      <br />
		      <sx:datetimepicker name="deliverydate" label="Delivery Date"
			 displayFormat="dd/MM/yyyy" />
		      <br />
		      <s:url id="url" value="/hello.action" />
		      <sx:div href="%{#url}" delay="2000">
			   Initial Content
		      </sx:div>
		      <br/>
		      <sx:tabbedpanel id="tabContainer">
			 <sx:div label="Tab 1">Tab 1</sx:div>
			 <sx:div label="Tab 2">Tab 2</sx:div>
		      </sx:tabbedpanel>
		   </s:form>
	       //
	       说明：
	       s:head生成Struts2 应用程序所需的javascript和stylesheet元素。
		接下来，s:div和s:text元素。s:div用于呈现HTML Div元素。
		这对于不喜欢将HTML和Struts标签混合在一起的人很有用，他们可选择使用s:div来渲染div。
		如图所示，s:text用于在屏幕上呈现文本。
		接下来是相类似的s:form标签。s:form标签具有确定在何处提交表单的action属性。
		因为在表单中有一个文件上传元素，我们必须将enctype设置为multipart。否则，就留空。
		在表单标签的末尾，有s:submit标签，这用于提交表单。提交表单时，所有表单值都将提交到s:form标签中指定的action。
		在s:form标签中，我们有一个称为secret的隐藏属性，此元素对最终用户不可见，并用于将状态从一个视图传递到另一个视图。
		s:label，s:textfield，s:password和s:textarea标签。这些分别用于渲染标签，输入字段，密码和文本区域。
		“key”属性用于从属性文件中提取这些控件的标签。我们已经在Struts2本地化/国际化（i18n）一章中讨论了这个特性。
		然后是s:file标签，它呈现输入文件上传的组件，此组件允许用户上传文件。
		在这个例子中，我们使用了s:file标签的“accept”参数来指定允许上传哪些文件类型。
		最后，s:token标签。token标签生成唯一的token，用于查明表单是否已被两次提交。呈现表单时，会将一个隐藏变量放置为token（令牌）值。
		例如令牌是“ABC”，提交此表单时，Struts Fitler将根据存储在会话中的令牌进行检查。如果匹配，则从会话中删除令牌。现在，如果表单意外被重新提交（通过刷新或通过点击浏览器后退按钮），表单将重新提交，用“ABC”作为令牌。在这种情况下，过滤器将对照存储在会话中的令牌再次进行检查。但是因为令牌“ABC”已经从会话中删除，它将不匹配，Struts过滤器将拒绝请求。
///
<struts>
<constant name="struts.devMode" value="false" />
   <!-- name必须元素，为package唯一标使，extends是制定继承另一个包的配置 -->
   <package name="helloworld" extends="struts-default" namespace="hello" >
     <action name="index">
     	<result>/index.jsp</result>
     </action>
      <!-- 标准的使用：-->
      <action name="Hello" 
            class="com.leo.struts2.HelloWordAction"
            method="execute">
            <result name="SUCCESS">/struts/Hello.jsp</result>
      </action>
     
      <!-- 过滤器的使用 
      <interceptors>
         <interceptor name="intercept"
            class="com.leo.struts2.Intercept" />
      </interceptors>

      <action name="hello" 
         class="com.leo.struts2.HelloWordAction" 
         method="execute">
         <interceptor-ref name="params"/>
         <interceptor-ref name="intercept" />
         <result name="success">/struts/Hello.jsp</result>
      </action>-->
   </package>
   <!--  
   -->
     <package name="mylogin" extends="struts-default">
      <!-- 标准的使用：-->
      <action name="userAction" 
            class="com.leo.struts2.UserAction"
            method="regist">
            <result name="input">/struts/indexlogin.jsp</result>
            <result>/struts/loginsucess.jsp</result>
            <!-- -冲定向
            <result name="success" type="redirect">
            	<param name="location">
            		/struts/other.jsp
             </result>-->
             <!-- -转发dispatcher
            <result name="success" type="dispatcher">
            	<param name="location">
            		/struts/other.jsp
             </result>-->
      </action>
      </package>
      <!--  -->
      <package name="ongl" namespace="/" extends="struts-default" >
      	<action name="OGNLAction"
      			class="com.leo.struts2.ognl.OGNLAction"
      			method="execute">
      	<result name="success">/struts/ognl.jsp</result>
      	</action>
      </package>
      <!-- 文件上传配置 maxSize是上传的最大值 -->
    <constant name="struts.multipart.maxSize" value="1000000" />

	   <package name="upload" extends="struts-default">
	   <action name="upload" class="com.leo.struts2.UploadAction"
	   method="execute"
	   >
	   		<!-- 添加拦截器
	   		<interceptor-ref name="basicStack"></interceptor-ref>
       		<interceptor-ref name="fileUpload">
           		<param name="allowedTypes">image/jpeg,image/gif,image/jpg</param>
       		</interceptor-ref> -->
       		<!--结束-->
	       <result name="SUCCESS">/successupload.jsp</result>
	       <result name="ERROR">/errorupload.jsp</result>
	   </action>
	   </package>
	   <!-- 数据库的使用-->
	   <package name="loginconnect" extends="struts-default">
	   	<action name="loginaction" class="com.leo.struts2.LoginAction" method="execute">
	   		<result name="success">/struts/success.jsp</result>
	   		<result name="error">/struts/error.jsp</result>
	   	</action>
	   </package>
	   <!-- 邮件发送 -->
	   <package name="email" extends="struts-default">
	   	<action name="eamil" class="com.leo.struts2.EmailAction" method="execute">
	   		<result name="success">/struts/struts/sendEmailSuccess.jsp</result>
	   		<result name="error">/struts/struts/error.jsp</result>
	   	</action>
	   </package>
	   <!-- 验证-->
	   <package name="empl" extends="struts-default">
	   	<action name="empinfo" class="com.leo.struts2.EmployeeAction" method="execute">
	   		<result name="success">/struts/employeesucc.jsp</result>
	   		<result name="error">/struts/error.jsp</result>
	   		 <result name="input">/struts/employee.jsp</result>
	   	</action>
	   </package>
	   <!--类型转换 -->
	   <package name="sys" extends="struts-default">
	   <!-- 异常映射 -->
	   <global-exception-mappings>
         <exception-mapping exception="java.lang.NullPointerException"
         result="error" />
      </global-exception-mappings>
      <!--  -->
      <action name="system" 
            class="com.leo.struts2.SystemDetails" 
            method="execute">
         <result name="success">/system.jsp</result>
         
      </action>
   </package>
   <!-- 引入其他struts的配置文件 -->
   <include file="com/leo/struts2/dynamic/struts_dy.xml"></include>
   <include file="com/leo/struts2/struts_r.xml"></include>
   <include file="com/leo/crm/action/struts_cus.xml"></include>
    <include file="com/leo/struts2/interceptor/struts_interceptor.xml"></include>
</struts>
Hibernate框架：
