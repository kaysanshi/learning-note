ehcache:
		缓存插件，可以缓存java对象提高系统的性能
		Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存,Java EE和轻量级容器。
		它具有内存和磁盘存储，缓存加载器,缓存扩展,缓存异常处理程序,一个gzip缓存servlet过滤器,支持REST和SOAP api等特点。
		特点：
				快速
				简单
				多种缓存策略
				缓存数据有两级：内存和磁盘，因此无需担心容量问题
				缓存数据会在虚拟机重启的过程中写入磁盘
				可以通过RMI、可插入API等方式进行分布式缓存
				具有缓存和缓存管理器的侦听接口
				支持多缓存管理器实例，以及一个实例的多个缓存区域
				提供Hibernate的缓存实现
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache-core</artifactId>
			<version>2.6.6</version>
		</dependency>
	同时先要引入ehcache.xml：
			cache ：自定的缓存，当自定的配置不满足实际情况时可以通过自定义（可以包含多个cache节点）
			name : 缓存的名称，可以通过指定名称获取指定的某个Cache对象
			maxElementsInMemory ：内存中允许存储的最大的元素个数，0代表无限个
			clearOnFlush：内存数量最大时是否清除。
			eternal ：设置缓存中对象是否为永久的，如果是，超时设置将被忽略，对象从不过期。根据存储数据的不同，例如一些静态不变的数据如省市区等可以设置为永不过时
			timeToIdleSeconds ： 设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。
			timeToLiveSeconds ：缓存数据的生存时间（TTL），也就是一个元素从构建到消亡的最大时间间隔值，这只能在元素不是永久驻留时有效，如果该值是0就意味着元素可以停顿无穷长的时间。
			overflowToDisk ：内存不足时，是否启用磁盘缓存。
			maxEntriesLocalDisk：当内存中对象数量达到maxElementsInMemory时，Ehcache将会对象写到磁盘中。
			maxElementsOnDisk：硬盘最大缓存个数。
			diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。
			diskPersistent：是否在VM重启时存储硬盘的缓存数据。默认值是false。
			diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。
	<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../config/ehcache.xsd">
	  <!--这是缓存到哪个目录，这里是temp临时的文件目录-->
	   <diskStore path="java.io.tmpdir"/>

		<!-- 可以存多少对象，是否永久保存，最大时间没用，存活时间
     		溢出了到磁盘，磁盘最多能存多少，磁盘数据是否持久化
     		线程轮回时间，淘汰策略（LRU:最近一顿时间利用最少的先清理。FIFO:先进先出)
      -->
	 <defaultCache
            maxElementsInMemory="10000"
            eternal="false" 
            timeToIdleSeconds="120"
            timeToLiveSeconds="120"
            overflowToDisk="true"
            maxElementsOnDisk="10000000"
            diskPersistent="false"
            diskExpiryThreadIntervalSeconds="120"
            memoryStoreEvictionPolicy="LRU"
            />
	使用的时候只需要在applicationContext.xml中配置就可以了：
		在注入安全管理器的同时把缓存管理器给注入：
		<!-- 注册realm -->
		<bean id="bosRealm" class="com.leo.bos.realm.BOSRealm"></bean>
		<!-- 注入安全管理器 -->
		<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
			<property name="realm" ref="bosRealm"></property>
			<property name="cacheManager" ref="cacheManager"></property>
		</bean>
		<!-- 注册缓存管理器 -->
		<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
			<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"></property>
		</bean>
	这样就可以实现了缓存的管理，其实就是为了让后台少进行后台数据的查询操作。这样有利于系统执行的更加的流畅

		
Quartz:
		Quartz是OpenSymphony开源组织在Job scheduling领域又一个开源项目，它可以与J2EE与J2SE应用程序相结合也可以单独使用。Quartz可以用来创建简单或为运行十个，百个，甚至是好几万个Jobs这样复杂的程序。
		Jobs可以做成标准的Java组件或 EJBs。Quartz的最新版本为Quartz 2.3.0。
		Quartz是一个完全由java编写的开源作业调度框架。不要让作业调度这个术语吓着你。尽管Quartz框架整合了许多额外功能， 但就其简易形式看，你会发现它易用得简直让人受不了！。
		简单地创建一个实现org.quartz.Job接口的java类。Job接口包含唯一的方法：
				public void execute(JobExecutionContext context)
				throws JobExecutionException;
		在你的Job接口实现类里面，添加一些逻辑到execute()方法。一旦你配置好Job实现类并设定好调度时间表，Quartz将密切注意剩余时间。
		当调度程序确定该是通知你的作业的时候，Quartz框架将调用你Job实现类（作业类）上的execute()方法并允许做它该做的事情。
		无需报告任何东西给调度器或调用任何特定的东西。仅仅执行任务和结束任务即可。如果配置你的作业在随后再次被调用，Quartz框架将在恰当的时间再次调用它
		运行环境：
				Quartz 可以运行嵌入在另一个独立式应用程序。
				Quartz 可以在应用程序服务器(或 servlet 容器)内被实例化，并且参与 XA 事务。
				Quartz 可以作为一个独立的程序运行(其自己的 Java 虚拟机内)，可以通过 RMI 使用。
				Quartz 可以被实例化，作为独立的项目集群(负载平衡和故障转移功能)，用于作业的执行。
		调度器：
				Quartz框架的核心是调度器。调度器负责管理Quartz应用运行时环境。调度器不是靠自己做所有的工作，而是依赖框架内一些非常重要的部件。
				Quartz不仅仅是线程和线程管理。为确保可伸缩性，Quartz采用了基于多线程的架构。
				启动时，框架初始化一套worker线程，这套线程被调度器用来执行预定的作业。这就是Quartz怎样能并发运行多个作业的原理。
				Quartz依赖一套松耦合的线程池管理部件来管理线程环境。
		API:
			Scheduler - 与调度程序交互的主要API。
			Job - 由希望由调度程序执行的组件实现的接口。
			JobDetail - 用于定义作业的实例。
			Trigger（即触发器） - 定义执行给定作业的计划的组件。
			JobBuilder - 用于定义/构建JobDetail实例，用于定义作业的实例。
			TriggerBuilder - 用于定义/构建触发器实例。



		quartz入门案例：
						本入门案例基于spring和quartz整合完成。
						第一步：创建maven工程，导入spring和quartz相关依赖
						 
						第二步：创建任务类
						 
						第三步：在spring配置文件中配置任务类
						 
						第四步：在spring配置文件中配置JobDetail
						 
						第五步：在spring配置文件中配置触发器
						 
						第六步：在spring配置文件中配置scheduler
						 
						第七步：加载spring配置文件，创建spring工厂
						 
						cron 表达式的格式
						Quartz cron 表达式的格式十分类似于 UNIX cron 格式，但还是有少许明显的区别。区别之一就是 Quartz 的格式向下支持到秒级别的计划，而 UNIX cron 计划仅支持至分钟级。许多我们的触发计划要基于秒级递增的(例如，每45秒)，因此这是一个非常好的差异。
						在 UNIX cron 里，要执行的作业（或者说命令）是存放在 cron 表达式中的，在第六个域位置上。Quartz 用 cron 表达式存放执行计划。引用了 cron 表达式的 CronTrigger 在计划的时间里会与 job 关联上。
						另一个与 UNIX cron 表达式的不同点是在表达式中支持域的数目。UNIX 给出五个域(分、时、日、月和周)，Quartz 提供七个域。表 5.1 列出了 Quartz cron 表达式支持的七个域。
						Quartz Cron 表达式支持到七个域 
						名称	是否必须	允许值	特殊字符
						秒	是	0-59	, - * /
						分	是	0-59	, - * /
						时	是	0-23	, - * /
						日	是	1-31	, - * ? / L W C
						月	是	1-12 或 JAN-DEC	, - * /
						周	是	1-7 或 SUN-SAT	, - * ? / L C #
						年	否	空 或 1970-2099	, - * /
						月份和星期的名称是不区分大小写的。FRI 和 fri 是一样的。 
						域之间有空格分隔，这和 UNIX cron 一样。无可争辩的，我们能写的最简单的表达式看起来就是这个了： 
						* * * ? * * 
						这个表达会每秒钟(每分种的、每小时的、每天的)激发一个部署的 job。 
						・理解特殊字符 
						同 UNIX cron 一样，Quartz cron 表达式支持用特殊字符来创建更为复杂的执行计划。然而，Quartz 在特殊字符的支持上比标准 UNIX cron 表达式更丰富了。 
						* 星号 
						使用星号(*) 指示着你想在这个域上包含所有合法的值。例如，在月份域上使用星号意味着每个月都会触发这个 trigger。
						表达式样例： 
						0 * 17 * * ? 
						意义：每天从下午5点到下午5:59中的每分钟激发一次 trigger。它停在下午 5:59 是因为值 17 在小时域上，在下午 6 点时，小时变为 18 了，也就不再理会这个 trigger，直到下一天的下午5点。 
						在你希望 trigger 在该域的所有有效值上被激发时使用 * 字符。 

						? 问号 

						? 号只能用在日和周域上，但是不能在这两个域上同时使用。你可以认为 ? 字符是 "我并不关心在该域上是什么值。" 这不同于星号，星号是指示着该域上的每一个值。? 是说不为该域指定值。 

						不能同时这两个域上指定值的理由是难以解释甚至是难以理解的。基本上，假定同时指定值的话，意义就会变得含混不清了：考虑一下，如果一个表达式在日域上有值11，同时在周域上指定了 WED。那么是要 trigger 仅在每个月的11号，且正好又是星期三那天被激发？还是在每个星期三的11号被激发呢？要去除这种不明确性的办法就是不能同时在这两个域上指定值。 

						只要记住，假如你为这两域的其中一个指定了值，那就必须在另一个字值上放一个 ?。 

						表达式样例： 

						0 10,44 14 ? 3 WEB 

						意义：在三月中的每个星期三的下午 2:10 和 下午 2:44 被触发。 

						, 逗号 

						逗号 (,) 是用来在给某个域上指定一个值列表的。例如，使用值 0,15,30,45 在秒域上意味着每15秒触发一个 trigger。 

						表达式样例： 

						0 0,15,30,45 * * * ? 

						意义：每刻钟触发一次 trigger。 

						/ 斜杠 

						斜杠 (/) 是用于时间表的递增的。我们刚刚用了逗号来表示每15分钟的递增，但是我们也能写成这样 0/15。 

						表达式样例： 

						0/15 0/30 * * * ? 

						意义：在整点和半点时每15秒触发 trigger。 

						- 中划线 

						中划线 (-) 用于指定一个范围。例如，在小时域上的 3-8 意味着 "3,4,5,6,7 和 8 点。"  域的值不允许回卷，所以像 50-10 这样的值是不允许的。 

						表达式样例： 

						0 45 3-8 ? * * 

						意义：在上午的3点至上午的8点的45分时触发 trigger。 

						L 字母

						L 说明了某域上允许的最后一个值。它仅被日和周域支持。当用在日域上，表示的是在月域上指定的月份的最后一天。例如，当月域上指定了 JAN 时，在日域上的 L 会促使 trigger 在1月31号被触发。假如月域上是 SEP，那么 L 会预示着在9月30号触发。换句话说，就是不管指定了哪个月，都是在相应月份的时最后一天触发 trigger。 

						表达式 0 0 8 L * ? 意义是在每个月最后一天的上午 8:00 触发 trigger。在月域上的 * 说明是 "每个月"。 

						当 L 字母用于周域上，指示着周的最后一天，就是星期六 (或者数字7)。所以如果你需要在每个月的最后一个星期六下午的 11:59 触发 trigger，你可以用这样的表达式 0 59 23 ? * L。 

						当使用于周域上，你可以用一个数字与 L 连起来表示月份的最后一个星期 X。例如，表达式 0 0 12 ? * 2L 说的是在每个月的最后一个星期一触发 trigger。 
						不要让范围和列表值与 L 连用

						虽然你能用星期数(1-7)与 L 连用，但是不允许你用一个范围值和列表值与 L 连用。这会产生不可预知的结果。

						W 字母 

						W 字符代表着平日 (Mon-Fri)，并且仅能用于日域中。它用来指定离指定日的最近的一个平日。大部分的商业处理都是基于工作周的，所以 W 字符可能是非常重要的。例如，日域中的 15W 意味着 "离该月15号的最近一个平日。" 假如15号是星期六，那么 trigger 会在14号(星期四)触发，因为距15号最近的是星期一，这个例子中也会是17号（译者Unmi注：不会在17号触发的，如果是15W，可能会是在14号(15号是星期六)或者15号(15号是星期天)触发，也就是只能出现在邻近的一天，如果15号当天为平日直接就会当日执行）。W 只能用在指定的日域为单天，不能是范围或列表值。 

						# 井号 

						# 字符仅能用于周域中。它用于指定月份中的第几周的哪一天。例如，如果你指定周域的值为 6#3，它意思是某月的第三个周五 (6=星期五，#3意味着月份中的第三周)。另一个例子 2#1 意思是某月的第一个星期一 (2=星期一，#1意味着月份中的第一周)。注意，假如你指定 #5，然而月份中没有第 5 周，那么该月不会触发。
						示例：
						表达式意义
						"0 0 12 * *?" 每天中午12点触发
						"0 15 10 ? **" 每天上午10:15触发
						"0 15 10 * *?" 每天上午10:15触发
						"0 15 10 * * ?*" 每天上午10:15触发
						"0 15 10 * * ?2005" 2005年的每天上午10:15触发
						"0 * 14 * *?" 在每天下午2点到下午2:59期间的每1分钟触发
						"0 0/5 14 * *?" 在每天下午2点到下午2:55期间的每5分钟触发
						"0 0/5 14,18 ** ?" 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发
						"0 0-5 14 * *?" 在每天下午2点到下午2:05期间的每1分钟触发
						"0 10,44 14 ? 3WED" 每年三月的星期三的下午2:10和2:44触发
						"0 15 10 ? *MON-FRI" 周一至周五的上午10:15触发
						"0 15 10 15 *?" 每月15日上午10:15触发
						"0 15 10 L *?" 每月最后一日的上午10:15触发
						"0 15 10 ? *6L" 每月的最后一个星期五上午10:15触发
						"0 15 10 ? * 6L2002-2005" 2002年至2005年的每月的最后一个星期五上午10:15触发
						"0 15 10 ? *6#3" 每月的第三个星期五上午10:15触发

			在web.xml中的配置：
						
			在spring配置文件配置：
					依赖：
					<!-- 任务调度quartz -->
						 <dependency>
						    <groupId>org.quartz-scheduler</groupId>
						    <artifactId>quartz</artifactId>
						    <version>2.2.1</version>
						  </dependency>
						  <dependency>
						    <groupId>org.quartz-scheduler</groupId>
						    <artifactId>quartz-jobs</artifactId>
						    <version>2.2.1</version>
						  </dependency> 
						  <!-- javaMail -->
						  <!-- https://mvnrepository.com/artifact/javax.mail/mail -->
							<dependency>
							    <groupId>javax.mail</groupId>
							    <artifactId>mail</artifactId>
							    <version>1.4.7</version>
							</dependency>
						<!-- quartz定时任务 -->
							<!-- 注册自定义作业类 -->
							<bean id="myJob" class="com.leo.bos.jobs.MailJob"></bean>
							<!-- 配置jobdetail任务详情 -->
							<bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
								<!-- 注入目标对象 -->
								<property name="targetObject" ref="myJob"></property>
								<!-- 注入木目标方法 value:方法名 -->
								<property name="targetMethod" value="run"></property>
							</bean>
							<!-- 配置触发器 -->
							<bean id="myTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
								<!-- 注入任务详情对象 -->
								<property name="jobDetail" ref="jobDetail"></property>
								<!-- 注入cron表达式，通过这个表单指定的触发的时间-->
								<property name="cronExpression">
									<value> 0/5 * * * * ?</value>
								</property>
							</bean>
							<!--配置调度工厂 -->
							<bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
								<!-- 注入触发器 -->
								<property name="triggers">
										<list>
											<ref bean="myTrigger"/>
										</list>
								</property>
							</bean>
				

